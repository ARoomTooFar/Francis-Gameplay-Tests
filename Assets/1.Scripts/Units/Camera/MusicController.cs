//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MusicController: MonoBehaviour {
	public Player[] allPlayers;
	public bool same;
	
	public AudioSource battle;
	public AudioSource environment;

	void Start () {
		GetComponent<Transform>();
		allPlayers = FindObjectsOfType(typeof(Player)) as Player[];

	}

	// Update is called once per frame
	void Update () {

		int actives = EnemyInSight ();

		if (actives > 0 && !battle.isPlaying) {
			environment.Pause ();
			environment.volume = 0;
			battle.volume = 0;
			battle.Play ();
		} else if (actives == 0 && battle.isPlaying) {
			if (TransitionOut (battle, 0.7f, 0))
				environment.UnPause ();
		} else if (environment.volume < 1 && environment.isPlaying) {
			TransitionIn (environment, 0.3f, 1);
		} else if (battle.volume < 1 && battle.isPlaying) {
			TransitionIn (battle, 0.3f, 1);
		}
	}

	int EnemyInSight(){
		HashSet<ARTFRoom> rooms = new HashSet<ARTFRoom> ();

		// find all rooms that the players are in
		foreach (Player play in allPlayers) {
			rooms.Add (MapData.TheFarRooms.find(play.transform.position.Round()));
		}
		List<GameObject> MonstersIndex = MapData.MonsterBlocks.allMonsters ();
		int numberofmonsters = 0;

		// add enemy to the amount of enemies active rooms.
		foreach (GameObject enemy in MonstersIndex) {
			foreach(ARTFRoom room in rooms) {
				if(room.inRoom(enemy.transform.position)) numberofmonsters++;
			}
		}
		return numberofmonsters;
	}

	public void setBattle(AudioClip clip){
		battle.clip = clip;
	}

	public void setEnvironment(AudioClip clip){
		environment.clip = clip;
	}

	bool TransitionIn(AudioSource musik, float rate, float done) {
		if(musik.volume < 0.2f) musik.volume += 0.1f * Time.deltaTime;
		else if (musik.volume < done) musik.volume += rate * Time.deltaTime;
		return musik.volume >= done;
	}
	
	bool TransitionOut(AudioSource musik, float rate, float done) {
		if (musik.volume > 0.2f) musik.volume -= rate * Time.deltaTime;
		else if (musik.volume > done) musik.volume -= 0.1f * Time.deltaTime;
		
		if(musik.volume <= done) {
			musik.Stop();
			musik.volume = 1;
			return true;
		}
		return false;
	}
}
